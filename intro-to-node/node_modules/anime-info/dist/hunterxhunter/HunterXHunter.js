"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var models_1 = require("./models");
var elements_dom_1 = require("../shared/utils/elements.dom");
var models_2 = require("../shared/models");
var utils_1 = require("./utils");
var HunterXHunter = /** @class */ (function (_super) {
    __extends(HunterXHunter, _super);
    function HunterXHunter(config) {
        if (config === void 0) { config = { lang: 'en' }; }
        return _super.call(this, config.lang, utils_1.getTagByLang(config.lang), utils_1.getBaseUrl(config.lang), models_1.defaultOptionFieldsHunterXHunter, models_1.charactersHunterXHunter) || this;
    }
    HunterXHunter.prototype._toJson = function (keys) {
        if (keys === void 0) { keys = []; }
        return __awaiter(this, void 0, void 0, function () {
            var hunter_x_hunter, promises;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        hunter_x_hunter = {};
                        promises = keys.map(function (value) { return __awaiter(_this, void 0, void 0, function () {
                            return __generator(this, function (_a) {
                                switch (value) {
                                    case 'abilities':
                                        hunter_x_hunter.abilities = this._abilities();
                                        break;
                                    case 'abilities_description':
                                        hunter_x_hunter.abilities_description = this._abilities_description();
                                        break;
                                    case 'affiliation':
                                        hunter_x_hunter.affiliation = this._affiliation();
                                        break;
                                    case 'age':
                                        hunter_x_hunter.age = this._age();
                                        break;
                                    case 'alias':
                                        hunter_x_hunter.alias = this._alias();
                                        break;
                                    case 'birthday':
                                        hunter_x_hunter.birthday = this._birthday();
                                        break;
                                    case 'blood_type':
                                        hunter_x_hunter.blood_type = this._blood_type();
                                        break;
                                    case 'description':
                                        hunter_x_hunter.description = this._description();
                                        break;
                                    case 'eye_color':
                                        hunter_x_hunter.eye_color = this._eye_color();
                                        break;
                                    case 'gender':
                                        hunter_x_hunter.gender = this._gender();
                                        break;
                                    case 'hair_color':
                                        hunter_x_hunter.hair_color = this._hair_color();
                                        break;
                                    case 'height':
                                        hunter_x_hunter.height = this._height();
                                        break;
                                    case 'japanese_voice':
                                        hunter_x_hunter.japanese_voice = this._japanese_voice();
                                        break;
                                    case 'name':
                                        hunter_x_hunter.name = this._name();
                                        break;
                                    case 'nen_type':
                                        hunter_x_hunter.nen_type = this._nen_type();
                                        break;
                                    case 'occupation':
                                        hunter_x_hunter.occupation = this._occupation();
                                        break;
                                    case 'relatives':
                                        hunter_x_hunter.relatives = this._relatives();
                                        break;
                                    case 'photo':
                                        hunter_x_hunter.photo = this._photo();
                                        break;
                                    case 'status':
                                        hunter_x_hunter.status = this._status();
                                        break;
                                    case 'weight':
                                        hunter_x_hunter.weight = this._weight();
                                        break;
                                    default:
                                        break;
                                }
                                return [2 /*return*/];
                            });
                        }); });
                        return [4 /*yield*/, Promise.all(promises)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, hunter_x_hunter];
                }
            });
        });
    };
    HunterXHunter.prototype._abilities = function () {
        return elements_dom_1.getAndRemoveTagBr(this._document, this._tags.abilities);
    };
    HunterXHunter.prototype._abilities_description = function () {
        return utils_1.getAbilitiesDescription(this._document, this._tags.abilities_description);
    };
    HunterXHunter.prototype._affiliation = function () {
        var _this = this;
        var affiliation = [];
        if (this._lang === 'es') {
            affiliation.push.apply(affiliation, elements_dom_1.getAndRemoveTagBr(this._document, this._tags.affiliation));
        }
        else {
            var tags = this._tags.affiliation.split('|');
            tags.forEach(function (tag) {
                affiliation.push.apply(affiliation, elements_dom_1.getAndRemoveTagBr(_this._document, tag));
            });
        }
        return affiliation;
    };
    HunterXHunter.prototype._age = function () {
        return elements_dom_1.getAndRemoveTagBr(this._document, this._tags.age);
    };
    HunterXHunter.prototype._alias = function () {
        var _this = this;
        var alias = this._tags.alias.split('|');
        return alias.map(function (tag) { return elements_dom_1.$Query(_this._document, tag); });
    };
    HunterXHunter.prototype._birthday = function () {
        return elements_dom_1.$Query(this._document, this._tags.birthday);
    };
    HunterXHunter.prototype._blood_type = function () {
        return elements_dom_1.$Query(this._document, this._tags.blood_type);
    };
    HunterXHunter.prototype._description = function () {
        return elements_dom_1.$Query(this._document, this._tags.description);
    };
    HunterXHunter.prototype._eye_color = function () {
        return elements_dom_1.getAndRemoveTagBr(this._document, this._tags.eye_color);
    };
    HunterXHunter.prototype._gender = function () {
        var gender = [];
        gender.push.apply(gender, elements_dom_1.getAndRemoveTagBr(this._document, this._tags.gender));
        if (this._lang === 'en') {
            gender.push.apply(gender, elements_dom_1.getAndRemoveTagBr(this._document, '[data-source="sex"] > div'));
        }
        return gender;
    };
    HunterXHunter.prototype._hair_color = function () {
        return elements_dom_1.getAndRemoveTagBr(this._document, this._tags.hair_color);
    };
    HunterXHunter.prototype._height = function () {
        return elements_dom_1.getAndRemoveTagBr(this._document, this._tags.height);
    };
    HunterXHunter.prototype._japanese_voice = function () {
        return elements_dom_1.getAndRemoveTagBr(this._document, this._tags.japanese_voice);
    };
    HunterXHunter.prototype._name = function () {
        return elements_dom_1.$Query(this._document, this._tags.name);
    };
    HunterXHunter.prototype._nen_type = function () {
        return elements_dom_1.getAndRemoveTagBr(this._document, this._tags.nen_type);
    };
    HunterXHunter.prototype._occupation = function () {
        var _this = this;
        var occupation = [];
        if (this._lang === 'es') {
            occupation.push.apply(occupation, elements_dom_1.getAndRemoveTagBr(this._document, this._tags.occupation));
        }
        else {
            var tags = this._tags.occupation.split('|');
            tags.forEach(function (tag) {
                occupation.push.apply(occupation, elements_dom_1.getAndRemoveTagBr(_this._document, tag));
            });
        }
        return occupation;
    };
    HunterXHunter.prototype._relatives = function () {
        return elements_dom_1.getAndRemoveTagBr(this._document, this._tags.relatives);
    };
    HunterXHunter.prototype._photo = function () {
        return elements_dom_1.getNameAndAllImageCharacter(this._document, this._tags.photo);
    };
    HunterXHunter.prototype._status = function () {
        return elements_dom_1.$Query(this._document, this._tags.status);
    };
    HunterXHunter.prototype._weight = function () {
        return elements_dom_1.getAndRemoveTagBr(this._document, this._tags.weight);
    };
    return HunterXHunter;
}(models_2.AnimesGeneric));
exports.HunterXHunter = HunterXHunter;
