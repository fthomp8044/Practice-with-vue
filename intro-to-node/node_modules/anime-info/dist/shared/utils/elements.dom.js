"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var jsdom_1 = require("jsdom");
function removeSquareBrackets(value) {
    if (typeof value === 'string') {
        return value.replace(/ *\[[^)]*\] */g, '');
    }
    return value;
}
exports.removeSquareBrackets = removeSquareBrackets;
function removeSpacesString(value) {
    if (typeof value === 'string') {
        return value.trim().replace(/\r?\n|\r/g, '');
    }
    return value;
}
exports.removeSpacesString = removeSpacesString;
function stripHTML(value) {
    if (typeof value === 'string') {
        return value.replace(/<.*?>/g, '');
    }
    return value;
}
exports.stripHTML = stripHTML;
function cleanString(value) {
    if (typeof value === 'string') {
        return removeSpacesString(removeSquareBrackets(stripHTML(value)));
    }
    return value;
}
exports.cleanString = cleanString;
function getTextContent(element) {
    if (element) {
        return removeSpacesString(removeSquareBrackets(element.textContent));
    }
    return null;
}
exports.getTextContent = getTextContent;
function getDom(url) {
    return __awaiter(this, void 0, void 0, function () {
        var dom;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, jsdom_1.JSDOM.fromURL(url)];
                case 1:
                    dom = _a.sent();
                    return [2 /*return*/, dom.window.document];
            }
        });
    });
}
exports.getDom = getDom;
function $Query(document, tag) {
    return getTextContent(document.querySelector(tag));
}
exports.$Query = $Query;
function getInnerHTML(element) {
    if (element) {
        return element.innerHTML;
    }
    return null;
}
exports.getInnerHTML = getInnerHTML;
function getAndRemoveTagBr(document, tag) {
    var string = getInnerHTML(document.querySelector(tag));
    if (typeof string === 'string') {
        return string
            .split('<br>')
            .filter(function (el) { return el; })
            .map(function (el) { return removeSquareBrackets(stripHTML(el)); });
    }
    return [];
}
exports.getAndRemoveTagBr = getAndRemoveTagBr;
function getImage(document, tag) {
    var photo = document.querySelector(tag);
    if (photo) {
        return photo.src;
    }
    return null;
}
exports.getImage = getImage;
function getNameAndAllImageCharacter(document, tag) {
    var list = [];
    var tags = tag.split('|');
    var elements = document.querySelectorAll(tags[0]);
    if (elements.length) {
        elements.forEach(function (element) {
            var icon = element.children[0];
            list.push({
                name: element.getAttribute('title'),
                icon: icon.src
            });
        });
    }
    else {
        var element = document.querySelector(tags[1]);
        if (element) {
            var icon = element.children[0];
            list.push({
                name: icon.getAttribute('data-image-name'),
                icon: icon.src
            });
        }
    }
    return list;
}
exports.getNameAndAllImageCharacter = getNameAndAllImageCharacter;
function getListElement(document, tag, innerHtml) {
    if (innerHtml === void 0) { innerHtml = false; }
    var list = [];
    var elements = document.querySelectorAll(tag);
    elements.forEach(function (el) {
        if (innerHtml) {
            list.push(cleanString(getInnerHTML(el)));
        }
        else {
            list.push(getTextContent(el));
        }
    });
    return list.filter(function (el) { return el; });
}
exports.getListElement = getListElement;
function getNameAndImage(document, tag) {
    var list = [];
    var elements = document.querySelectorAll(tag);
    for (var index = 0; index < elements.length; index += 2) {
        if (elements[index].children[0] && elements[index + 1]) {
            list.push({
                name: removeSpacesString(elements[index + 1].textContent),
                icon: elements[index].children[0].getAttribute('data-src')
            });
        }
    }
    return list;
}
exports.getNameAndImage = getNameAndImage;
function getNameAndImageOnly(document, tag) {
    var list = [];
    var elements = document.querySelectorAll(tag);
    elements.forEach(function (element) {
        list.push({
            icon: element.children[0].getAttribute('data-src'),
            name: element.getAttribute('title')
        });
    });
    return list;
}
exports.getNameAndImageOnly = getNameAndImageOnly;
