"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var models_1 = require("./models");
var elements_dom_1 = require("../shared/utils/elements.dom");
var models_2 = require("../shared/models");
var utils_1 = require("./utils");
var DragonBall = /** @class */ (function (_super) {
    __extends(DragonBall, _super);
    function DragonBall(config) {
        if (config === void 0) { config = { lang: 'pt-br' }; }
        return _super.call(this, config.lang, utils_1.getTagByLang(config.lang), "https://dragonball.fandom.com/" + config.lang + "/wiki/", models_1.defaultOptionFieldsDragonBall, models_1.charactersDragonBall) || this;
    }
    DragonBall.prototype._toJson = function (keys) {
        if (keys === void 0) { keys = []; }
        return __awaiter(this, void 0, void 0, function () {
            var dragon_ball, promises;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        dragon_ball = {};
                        return [4 /*yield*/, keys.map(function (value) { return __awaiter(_this, void 0, void 0, function () {
                                return __generator(this, function (_a) {
                                    switch (value) {
                                        case 'address':
                                            dragon_ball.address = this._address();
                                            break;
                                        case 'alias':
                                            dragon_ball.alias = this._alias();
                                            break;
                                        case 'appears':
                                            dragon_ball.appears = this._appears();
                                            break;
                                        case 'birthday':
                                            dragon_ball.birthday = this._birthday();
                                            break;
                                        case 'death':
                                            dragon_ball.death = this._death();
                                            break;
                                        case 'description':
                                            dragon_ball.description = this._description();
                                            break;
                                        case 'height':
                                            dragon_ball.height = this._height();
                                            break;
                                        case 'name':
                                            dragon_ball.name = this._name();
                                            break;
                                        case 'occupation':
                                            dragon_ball.occupation = this._occupation();
                                            break;
                                        case 'photo':
                                            dragon_ball.photo = this._photo();
                                            break;
                                        case 'race':
                                            dragon_ball.race = this._race();
                                            break;
                                        case 'relatives':
                                            dragon_ball.relatives = this._relatives();
                                            break;
                                        case 'sex':
                                            dragon_ball.sex = this._sex();
                                            break;
                                        case 'transformation':
                                            dragon_ball.transformation = this._transformation();
                                            break;
                                        case 'weight':
                                            dragon_ball.weight = this._weight();
                                            break;
                                        default:
                                            break;
                                    }
                                    return [2 /*return*/];
                                });
                            }); })];
                    case 1:
                        promises = _a.sent();
                        return [4 /*yield*/, Promise.all(promises)];
                    case 2:
                        _a.sent();
                        return [2 /*return*/, dragon_ball];
                }
            });
        });
    };
    DragonBall.prototype._name = function () {
        return elements_dom_1.$Query(this._document, this._tags.name);
    };
    DragonBall.prototype._description = function () {
        return elements_dom_1.$Query(this._document, this._tags.description);
    };
    DragonBall.prototype._sex = function () {
        return elements_dom_1.$Query(this._document, this._tags.sex);
    };
    DragonBall.prototype._birthday = function () {
        return elements_dom_1.$Query(this._document, this._tags.birthday);
    };
    DragonBall.prototype._height = function () {
        return elements_dom_1.$Query(this._document, this._tags.height);
    };
    DragonBall.prototype._weight = function () {
        return elements_dom_1.$Query(this._document, this._tags.weight);
    };
    DragonBall.prototype._alias = function () {
        var alias = [];
        if (this._lang === 'es') {
            alias.push.apply(alias, elements_dom_1.getListElement(this._document, this._tags.alias, true));
        }
        else {
            alias.push.apply(alias, elements_dom_1.getAndRemoveTagBr(this._document, this._tags.alias));
        }
        return alias;
    };
    DragonBall.prototype._race = function () {
        return elements_dom_1.getListElement(this._document, this._tags.race);
    };
    DragonBall.prototype._death = function () {
        return elements_dom_1.getListElement(this._document, this._tags.death, true);
    };
    DragonBall.prototype._address = function () {
        return elements_dom_1.getListElement(this._document, this._tags.address);
    };
    DragonBall.prototype._occupation = function () {
        var alias = [];
        if (this._lang === 'pt-br') {
            alias.push.apply(alias, elements_dom_1.getListElement(this._document, this._tags.occupation, true));
        }
        else {
            alias.push.apply(alias, elements_dom_1.getAndRemoveTagBr(this._document, this._tags.occupation));
        }
        return alias;
    };
    DragonBall.prototype._relatives = function () {
        return elements_dom_1.getListElement(this._document, this._tags.relatives, true);
    };
    DragonBall.prototype._appears = function () {
        return elements_dom_1.getNameAndImageOnly(this._document, this._tags.appears);
    };
    DragonBall.prototype._photo = function () {
        return elements_dom_1.getNameAndAllImageCharacter(this._document, this._tags.photo);
    };
    DragonBall.prototype._transformation = function () {
        return utils_1.getTransformations(this._document, this._tags.transformation, this._lang);
    };
    return DragonBall;
}(models_2.AnimesGeneric));
exports.DragonBall = DragonBall;
