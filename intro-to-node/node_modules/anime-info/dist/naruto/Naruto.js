"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var elements_dom_1 = require("../shared/utils/elements.dom");
var models_1 = require("./models");
var models_2 = require("../shared/models");
var utils_1 = require("./utils");
var Naruto = /** @class */ (function (_super) {
    __extends(Naruto, _super);
    function Naruto(config) {
        if (config === void 0) { config = { lang: 'pt-br' }; }
        return _super.call(this, config.lang, utils_1.getTagByLang(config.lang), "https://naruto.fandom.com/" + config.lang + "/wiki/", models_1.defaultOptionFieldsNaruto, models_1.narutoCharacters) || this;
    }
    Naruto.prototype._toJson = function (keys) {
        if (keys === void 0) { keys = []; }
        return __awaiter(this, void 0, void 0, function () {
            var naruto, promises;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        naruto = {};
                        return [4 /*yield*/, keys.map(function (value) { return __awaiter(_this, void 0, void 0, function () {
                                var _a, _b, _c, _d;
                                return __generator(this, function (_e) {
                                    switch (_e.label) {
                                        case 0:
                                            _a = value;
                                            switch (_a) {
                                                case 'affiliation': return [3 /*break*/, 1];
                                                case 'age': return [3 /*break*/, 2];
                                                case 'birthday': return [3 /*break*/, 3];
                                                case 'clan': return [3 /*break*/, 4];
                                                case 'classification': return [3 /*break*/, 5];
                                                case 'debut': return [3 /*break*/, 6];
                                                case 'description': return [3 /*break*/, 7];
                                                case 'family': return [3 /*break*/, 8];
                                                case 'height': return [3 /*break*/, 9];
                                                case 'jutsu': return [3 /*break*/, 10];
                                                case 'kekkei_genkai': return [3 /*break*/, 12];
                                                case 'name': return [3 /*break*/, 13];
                                                case 'nature_type': return [3 /*break*/, 14];
                                                case 'ninja_rank': return [3 /*break*/, 15];
                                                case 'ninja_registration': return [3 /*break*/, 16];
                                                case 'occupation': return [3 /*break*/, 17];
                                                case 'partner': return [3 /*break*/, 18];
                                                case 'photo': return [3 /*break*/, 19];
                                                case 'quotes': return [3 /*break*/, 20];
                                                case 'sex': return [3 /*break*/, 22];
                                                case 'status': return [3 /*break*/, 23];
                                                case 'team': return [3 /*break*/, 24];
                                                case 'titles': return [3 /*break*/, 25];
                                                case 'tools': return [3 /*break*/, 26];
                                                case 'voices': return [3 /*break*/, 28];
                                                case 'weight': return [3 /*break*/, 29];
                                            }
                                            return [3 /*break*/, 30];
                                        case 1:
                                            naruto.affiliation = this._affiliation();
                                            return [3 /*break*/, 31];
                                        case 2:
                                            naruto.age = this._age();
                                            return [3 /*break*/, 31];
                                        case 3:
                                            naruto.birthday = this._birthday();
                                            return [3 /*break*/, 31];
                                        case 4:
                                            naruto.clan = this._clan();
                                            return [3 /*break*/, 31];
                                        case 5:
                                            naruto.classification = this._classification();
                                            return [3 /*break*/, 31];
                                        case 6:
                                            naruto.debut = this._debut();
                                            return [3 /*break*/, 31];
                                        case 7:
                                            naruto.description = this._description();
                                            return [3 /*break*/, 31];
                                        case 8:
                                            naruto.family = this._family();
                                            return [3 /*break*/, 31];
                                        case 9:
                                            naruto.height = this._height();
                                            return [3 /*break*/, 31];
                                        case 10:
                                            _b = naruto;
                                            return [4 /*yield*/, this._jutsu()];
                                        case 11:
                                            _b.jutsu = _e.sent();
                                            return [3 /*break*/, 31];
                                        case 12:
                                            naruto.kekkei_genkai = this._kekkei_genkai();
                                            return [3 /*break*/, 31];
                                        case 13:
                                            naruto.name = this._name();
                                            return [3 /*break*/, 31];
                                        case 14:
                                            naruto.nature_type = this._nature_type();
                                            return [3 /*break*/, 31];
                                        case 15:
                                            naruto.ninja_rank = this._ninja_rank();
                                            return [3 /*break*/, 31];
                                        case 16:
                                            naruto.ninja_registration = this._ninja_registration();
                                            return [3 /*break*/, 31];
                                        case 17:
                                            naruto.occupation = this._occupation();
                                            return [3 /*break*/, 31];
                                        case 18:
                                            naruto.partner = this._partner();
                                            return [3 /*break*/, 31];
                                        case 19:
                                            naruto.photo = this._photo();
                                            return [3 /*break*/, 31];
                                        case 20:
                                            _c = naruto;
                                            return [4 /*yield*/, this._quotes()];
                                        case 21:
                                            _c.quotes = _e.sent();
                                            return [3 /*break*/, 31];
                                        case 22:
                                            naruto.sex = this._sex();
                                            return [3 /*break*/, 31];
                                        case 23:
                                            naruto.status = this._status();
                                            return [3 /*break*/, 31];
                                        case 24:
                                            naruto.team = this._team();
                                            return [3 /*break*/, 31];
                                        case 25:
                                            naruto.titles = this._titles();
                                            return [3 /*break*/, 31];
                                        case 26:
                                            _d = naruto;
                                            return [4 /*yield*/, this._tools()];
                                        case 27:
                                            _d.tools = _e.sent();
                                            return [3 /*break*/, 31];
                                        case 28:
                                            naruto.voices = this._voices();
                                            return [3 /*break*/, 31];
                                        case 29:
                                            naruto.weight = this._weight();
                                            return [3 /*break*/, 31];
                                        case 30: return [3 /*break*/, 31];
                                        case 31: return [2 /*return*/];
                                    }
                                });
                            }); })];
                    case 1:
                        promises = _a.sent();
                        return [4 /*yield*/, Promise.all(promises)];
                    case 2:
                        _a.sent();
                        return [2 /*return*/, naruto];
                }
            });
        });
    };
    Naruto.prototype._debut = function () {
        return {
            anime: elements_dom_1.$Query(this._document, this._tags.anime),
            game: elements_dom_1.$Query(this._document, this._tags.game),
            manga: elements_dom_1.$Query(this._document, this._tags.manga),
            movie: elements_dom_1.$Query(this._document, this._tags.movie),
            novel: elements_dom_1.$Query(this._document, this._tags.novel),
            ova: elements_dom_1.$Query(this._document, this._tags.ova)
        };
    };
    Naruto.prototype._name = function () {
        return elements_dom_1.$Query(this._document, this._tags.name);
    };
    Naruto.prototype._description = function () {
        return elements_dom_1.$Query(this._document, this._tags.description);
    };
    Naruto.prototype._titles = function () {
        return elements_dom_1.getListElement(this._document, this._tags.titles);
    };
    Naruto.prototype._birthday = function () {
        return elements_dom_1.$Query(this._document, this._tags.birthday);
    };
    Naruto.prototype._status = function () {
        return elements_dom_1.$Query(this._document, this._tags.status);
    };
    Naruto.prototype._age = function () {
        return elements_dom_1.getAndRemoveTagBr(this._document, this._tags.age);
    };
    Naruto.prototype._height = function () {
        return elements_dom_1.getAndRemoveTagBr(this._document, this._tags.height);
    };
    Naruto.prototype._weight = function () {
        return elements_dom_1.getAndRemoveTagBr(this._document, this._tags.weight);
    };
    Naruto.prototype._classification = function () {
        return elements_dom_1.getListElement(this._document, this._tags.classification);
    };
    Naruto.prototype._team = function () {
        return elements_dom_1.getListElement(this._document, this._tags.team);
    };
    Naruto.prototype._partner = function () {
        return elements_dom_1.getListElement(this._document, this._tags.partner);
    };
    Naruto.prototype._occupation = function () {
        var occupation = elements_dom_1.getNameAndImage(this._document, this._tags.occupation);
        if (occupation.length === 0) {
            return elements_dom_1.getAndRemoveTagBr(this._document, this._tags.occupation.replace(' > a', ''));
        }
        return occupation;
    };
    Naruto.prototype._ninja_rank = function () {
        return elements_dom_1.getListElement(this._document, this._tags.ninja_rank);
    };
    Naruto.prototype._ninja_registration = function () {
        return elements_dom_1.$Query(this._document, this._tags.ninja_registration);
    };
    Naruto.prototype._family = function () {
        return elements_dom_1.getListElement(this._document, this._tags.family);
    };
    Naruto.prototype._jutsu = function () {
        return __awaiter(this, void 0, void 0, function () {
            var url, jutsu;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = this._baseUrl + "Jutsu_de_" + this._character;
                        return [4 /*yield*/, utils_1.getNameAndPhotoTable(this._document, this._tags.jutsu, this._lang, url)];
                    case 1:
                        jutsu = _a.sent();
                        return [2 /*return*/, jutsu];
                }
            });
        });
    };
    Naruto.prototype._nature_type = function () {
        return elements_dom_1.getNameAndImage(this._document, this._tags.nature_type);
    };
    Naruto.prototype._tools = function () {
        return __awaiter(this, void 0, void 0, function () {
            var url, tools;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = this._baseUrl + "Equipamentos_de_" + this._character;
                        return [4 /*yield*/, utils_1.getNameAndPhotoTable(this._document, this._tags.tools, this._lang, url)];
                    case 1:
                        tools = _a.sent();
                        return [2 /*return*/, tools];
                }
            });
        });
    };
    Naruto.prototype._quotes = function () {
        return __awaiter(this, void 0, void 0, function () {
            var url, quotes;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = this._baseUrl + "Frases_de_" + this._character;
                        return [4 /*yield*/, utils_1.getQuotes(this._tags.quotes, this._lang, url)];
                    case 1:
                        quotes = _a.sent();
                        return [2 /*return*/, quotes];
                }
            });
        });
    };
    Naruto.prototype._sex = function () {
        return elements_dom_1.$Query(this._document, this._tags.sex);
    };
    Naruto.prototype._photo = function () {
        return elements_dom_1.getNameAndAllImageCharacter(this._document, this._tags.photo);
    };
    Naruto.prototype._voices = function () {
        var _a = this._tags.voices, name = _a.name, country = _a.country;
        return utils_1.getVoices(this._document, country, name);
    };
    Naruto.prototype._kekkei_genkai = function () {
        return elements_dom_1.getNameAndImage(this._document, this._tags.kekkei_genkai);
    };
    Naruto.prototype._affiliation = function () {
        return elements_dom_1.getNameAndImage(this._document, this._tags.affiliation);
    };
    Naruto.prototype._clan = function () {
        return elements_dom_1.getNameAndImage(this._document, this._tags.clan);
    };
    return Naruto;
}(models_2.AnimesGeneric));
exports.Naruto = Naruto;
